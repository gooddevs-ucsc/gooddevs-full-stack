"""add notification table

Revision ID: 48b49abe4c85
Revises: 33dbc9054b2f
Create Date: 2025-10-05 01:25:28.185911

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '48b49abe4c85'
down_revision = '33dbc9054b2f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('PROJECT_APPROVED', 'PROJECT_REJECTED', 'APPLICATION_RECEIVED', 'APPLICATION_APPROVED', 'APPLICATION_REJECTED', 'NEW_COMMENT', 'NEW_REPLY', 'TASK_ASSIGNED', 'PROJECT_STATUS_CHANGED', name='notificationtype').create(op.get_bind())
    op.create_table('notification',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('type', postgresql.ENUM('PROJECT_APPROVED', 'PROJECT_REJECTED', 'APPLICATION_RECEIVED', 'APPLICATION_APPROVED', 'APPLICATION_REJECTED', 'NEW_COMMENT', 'NEW_REPLY', 'TASK_ASSIGNED', 'PROJECT_STATUS_CHANGED', name='notificationtype', create_type=False), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('message', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('related_entity_id', sa.Uuid(), nullable=True),
    sa.Column('related_entity_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('action_url', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('projectapplication', 'volunteer_role',
               existing_type=postgresql.ENUM('FRONTEND', 'BACKEND', 'FULLSTACK', 'UIUX', 'MOBILE', 'DEVOPS', 'QA', 'PM', name='developerrole'),
               nullable=True)
    op.alter_column('projectapplication', 'status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'WITHDRAWN', name='applicationstatus'),
               nullable=True)
    op.drop_constraint('uq_projectapplication_project_volunteer', 'projectapplication', type_='unique')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('uq_projectapplication_project_volunteer', 'projectapplication', ['project_id', 'volunteer_id'])
    op.alter_column('projectapplication', 'status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'WITHDRAWN', name='applicationstatus'),
               nullable=False)
    op.alter_column('projectapplication', 'volunteer_role',
               existing_type=postgresql.ENUM('FRONTEND', 'BACKEND', 'FULLSTACK', 'UIUX', 'MOBILE', 'DEVOPS', 'QA', 'PM', name='developerrole'),
               nullable=False)
    op.drop_table('notification')
    sa.Enum('PROJECT_APPROVED', 'PROJECT_REJECTED', 'APPLICATION_RECEIVED', 'APPLICATION_APPROVED', 'APPLICATION_REJECTED', 'NEW_COMMENT', 'NEW_REPLY', 'TASK_ASSIGNED', 'PROJECT_STATUS_CHANGED', name='notificationtype').drop(op.get_bind())
    # ### end Alembic commands ###
